package com.example.service;

import com.example.entity.User;
import com.example.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ForgotPasswordService {

    private final UserRepository userRepository;
    private final OtpService otpService;
    private final PasswordEncoder passwordEncoder;

    public String sendOtpToEmail(String email) {
        Optional<User> userOpt = userRepository.findByEmail(email);

        if (userOpt.isEmpty()) {
            return "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email: " + email;
        }

        otpService.generateAndSendOtp(email);

        return "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email " + email + ". Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.";
    }


    @Transactional
    public String resetPassword(String email, String newPassword, String newPasswordConfirm) {
        System.out.println("üü¢ [RESET] Nh·∫≠n y√™u c·∫ßu reset cho email: " + email);

        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isEmpty()) {
            System.out.println("üî¥ [RESET] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!");
            return "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!";
        }

        if (!newPassword.equals(newPasswordConfirm)) {
            System.out.println("üî¥ [RESET] M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            System.out.println(newPassword);
            System.out.println(newPasswordConfirm);
            return "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!";
        }

        User user = userOpt.get();
        System.out.println("üü¢ [RESET] Tr∆∞·ªõc khi ƒë·ªïi, m·∫≠t kh·∫©u trong DB l√†: " + user.getPassword());

        // ‚úÖ M√£ h√≥a v√† l∆∞u
        String encodedPassword = passwordEncoder.encode(newPassword);
        user.setPassword(encodedPassword);
        userRepository.saveAndFlush(user);

        System.out.println("üü¢ [RESET] Sau khi ƒë·ªïi, m·∫≠t kh·∫©u m·ªõi l√†: " + encodedPassword);
        System.out.println("üü¢ [RESET] ƒê√£ g·ªçi saveAndFlush() th√†nh c√¥ng.");

        otpService.removeOtp(email);

        return "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho t√†i kho·∫£n " + email;
    }


    public String resendOtpToEmail(String email) {
        Optional<User> userOpt = userRepository.findByEmail(email);

        if (userOpt.isEmpty()) {
            return "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email: " + email;
        }

        otpService.generateAndSendOtp(email); // T·∫°o m√£ m·ªõi v√† g·ª≠i l·∫°i

        return "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i t·ªõi email " + email + ". Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.";
    }

    @Transactional(readOnly = true)
    public String verifyOtp(String email, String otp) {
        Optional<User> userOpt = userRepository.findByEmail(email);

        if (userOpt.isEmpty()) {
            return "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!";
        }

        boolean isValidOtp = otpService.verifyOtp(email, otp);

        if (!isValidOtp) {
            return "M√£ OTP kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n!";
        }

        return "X√°c th·ª±c OTP th√†nh c√¥ng!";
    }

}
